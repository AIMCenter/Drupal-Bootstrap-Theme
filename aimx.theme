<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 *
 *
 * Example on how to alter theme settings form
 *
 */


function aimx_preprocess_node_edit_form($vars)
{
}
function aimx_theme_suggestions_form_element_alter(&$suggestions, $vars)
{
  $element = $vars['element'];
}




function aimx_preprocess_menu_local_action(&$variables)
{

  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
  /*
  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
  */
}

function aimx_theme_suggestions_container_alter(&$suggestions, $vars)
{
  $element = $vars['element'];
  if (isset($element['#type'])) {
    $suggestions[] = 'container__' . $element['#type'];
  }
}
function aimx_preprocess_container()
{
}
function aimx_theme_suggestions_input_alter(array &$suggestions, array $vars)
{
  $element = $vars['element'];

  if ($element['#type'] == 'submit' && !($element['#ajax'])) {
    $suggestions[] = 'input__submit_button';
  }
  if ($element['#type'] == 'submit' && isset($element['#ajax'])) {
    $suggestions[] = 'input__submit_ajax';
  }
}

function aimx_preprocess_views_ui_container(&$vars)
{
  // xdebug_break();
}

function aimx_preprocess_dropbutton_wrapper(&$vars)
{
  // xdebug_break();
}

function aimx_preprocess_row(&$vars)
{
  $region = 'content';
  $test2 = $vars['content'][$region];

  $cols = array_filter($vars['content'][$region], 'checkIfRenderItem', ARRAY_FILTER_USE_KEY);
  $vars['row_stats']['total_cols'] = count($cols);
  $vars['row_items'] = $cols;
  $firstItemKey = array_key_first($vars['row_items']);
  if ($firstItemKey) {
    $vars['row_items'][$firstItemKey]['#attributes']['scope'] = 'row';
  }
  //xdebug_break();
}

function aimx_preprocess_links__dropbutton(&$vars)
{

  array_remove($vars['attributes']['class'], 'dropbutton');
  array_remove($vars['attributes']['class'], 'icon compact add');

  $links = &$vars['links'];
  $tmpI = 0;
  foreach ($links as $key => &$link) {

    if (isset($link['link'])) {
      $link['link']['#options']['attributes']['class'] = array_remove($link['link']['#options']['attributes']['class'], 'dropbutton');
      $link['link']['#options']['attributes']['class'] = array_remove($link['link']['#options']['attributes']['class'], "icon compact add");
      $link['link']['#options']['attributes']['class'] = array_remove($link['link']['#options']['attributes']['class'], 'icon compact rearrange');
      $link['link']['#options']['attributes']['class'][] = 'btn';
    }
    if ($tmpI === 0) {
      if (isset($link['link'])) {
        $link['link']['#options']['attributes']['class'][] = 'btn-primary btn-sm';
      } elseif (isset($link['attributes'])) {
        $link['attributes']['class'][] = 'btn-primary btn-sm';
      }
    } else {
      if (isset($link['link'])) {
        $link['link']['#options']['attributes']['class'][] = 'btn-secondary dropdown-item';
      } elseif (isset($link['attributes'])) {
        $link['attributes']['class'][] = 'btn-secondary dropdown-item';
      }
    }
    $tmpI++;
  }

  if (sizeof($links) > 1) {
    $vars['multiple_links'] = TRUE;
  }

  if ($links) {
    $vars['first_button'] = reset($links);
    $vars['first_button_attributes'] = new Attribute(['class' => ['btn-primary', 'btn', 'btn-sm']]);
    array_shift($links);
  }
}

function aimx_preprocess_input__submit_button(&$vars)
{
  $vars['attributes'] = new Attribute($vars['attributes']);
  if (count(array_intersect(['::save'], $vars['element']['#submit']))) {
    $vars['btn_type'] = 'primary';
  } elseif (count(array_intersect(['::cancel', "::submitDisplayDelete"], $vars['element']['#submit']))) {
    $vars['btn_type'] = 'danger';
  } else {

    $vars['btn_type'] = 'default';
  }
  if (isset($vars['element']['#dropbutton'])) {
    $vars['is_dropbutton'] = TRUE;
  }
}


function convertItemToSuggestion($string)
{
  return strtolower(preg_replace('/\s+/', '_', $string));
}


function array_remove($array, $item)
{
  $index = array_search($item, $array);
  if ($index === false)
    return $array;
  array_splice($array, $index, 1);
  return $array;
}

function checkIfRenderItem($item)
{
  return strpos($item, "#") === false;
}



/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function aimx_preprocess_html(&$variables)
{
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  } elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  } elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  } else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

  // Scroll Spy info added to body
  if ($scroll_spy = theme_get_setting('aimx_scroll_spy')) {
    $variables['attributes']['data-target'] = $scroll_spy;
    $variables['attributes']['data-spy'] = "scroll";
  }

  // Page specific info
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'user')) {
    $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
  }

  // SEO Information
  $http_equiv = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];
}

function aimx_page_attachments_alter(&$page)
{
  $viewport = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function aimx_preprocess_page(&$variables)
{
  if (\Drupal::moduleHandler()->moduleExists('bootstrap_library')) {
    $library = theme_get_setting('aimx_library');
    switch ($library) {
      case 'cdn':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap-cdn';
        break;
      case 'production':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap';
        break;
      case 'development':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap-dev';
        break;
    }
  }

  $fonts = theme_get_setting('aimx_google_fonts');
  if ($fonts) {
    $variables['#attached']['library'][] = 'aimx/' . $fonts;
  }

  $icons = theme_get_setting('aimx_icons');
  if ($icons) {
    $variables['#attached']['library'][] = 'aimx/' . $icons;
  }

  $system_messages = theme_get_setting('aimx_system_messages');
  if ($system_messages) {
    $variables['#attached']['library'][] = 'aimx/' . $system_messages;
  }

  //  $width = _aimx_content_width(!empty($variables['page']['sidebar_first']), !empty($variables['page']['sidebar_second']));
  //  $content_width = 'col-md-' . $width;
  $content_width = 'col';
  $sidebar_first_width = 'col-md-' . theme_get_setting('aimx_sidebar_first_width');
  $sidebar_second_width = 'col-md-' . theme_get_setting('aimx_sidebar_second_width');

  // Define default classes for containers
  $variables['navbar_top_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-top'],
  ];
  $variables['navbar_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-main'],
  ];
  $variables['content_attributes'] = [
    'class' => ['main-content', $content_width],
    'id' => ['content'],
    'role' => ['main'],
  ];
  $variables['sidebar_first_attributes'] = [
    'class' =>  ['sidebar', $sidebar_first_width],
    'id' => ['sidebar_first'],
  ];
  $variables['sidebar_second_attributes'] = [
    'class' => ['sidebar', $sidebar_second_width],
    'id' => ['sidebar_second'],
  ];

  // Affix
  $affix_navbar_top = theme_get_setting('aimx_navbar_top_affix');
  $affix_navbar = theme_get_setting('aimx_navbar_affix');
  $affix_sidebar_first = theme_get_setting('aimx_sidebar_first_affix');
  $affix_sidebar_second = theme_get_setting('aimx_sidebar_second_affix');
  if ($affix_navbar_top || $affix_navbar || $affix_sidebar_first || $affix_sidebar_second) {
    $variables['#attached']['library'][] = 'aimx/affix';
    if ($affix_navbar_top) {
      $variables['navbar_top_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_navbar) {
      $variables['navbar_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_sidebar_first) {
      $variables['sidebar_first_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_sidebar_second) {
      $variables['sidebar_second_attributes']['data-toggle'] = 'affix';
    }
  }

  // Calculate widths
  if (theme_get_setting('aimx_content_offset')) {
    $variables['content_attributes']['class'][] =  'offset-md-' . theme_get_setting('aimx_content_offset');
  }
  if (theme_get_setting('aimx_sidebar_first_offset')) {
    $variables['sidebar_first_attributes']['class'][] =  'offset-md-' . theme_get_setting('aimx_sidebar_first_offset');
  }
  if (theme_get_setting('aimx_sidebar_second_offset')) {
    $variables['sidebar_second_attributes']['class'][] =  'offset-md-' . theme_get_setting('aimx_sidebar_second_offset');
  }

  // Define column layout classes
  switch (theme_get_setting('aimx_sidebar_position')) {
    case 'left':
      $variables['sidebar_first_attributes']['class'][] = 'order-first';
      $variables['content_attributes']['class'][] = 'order-last';
      break;
    case 'both':
      $variables['sidebar_first_attributes']['class'][] = 'order-first';
      $variables['sidebar_second_attributes']['class'][] = 'order-last';
      break;
    case 'right':
      $variables['content_attributes']['class'][] = 'order-first';
      $variables['sidebar_second_attributes']['class'][] = 'order-last';
      break;
  }

  // Define navigation position
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('aimx_navbar_top_position');
  $variables['navbar_attributes']['class'][] = theme_get_setting('aimx_navbar_position');

  // Define navigation color scheme
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('aimx_navbar_top_color');
  $variables['navbar_attributes']['class'][] = theme_get_setting('aimx_navbar_color');

  // Define navigation background classes
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('aimx_navbar_top_background');
  $variables['navbar_attributes']['class'][] = theme_get_setting('aimx_navbar_background');

  // Define navigation toggle size
  switch (theme_get_setting('aimx_navbar_toggle')) {
    case 'navbar-toggleable-lg':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-lg';
      break;
    case 'navbar-toggleable-md':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;
    case 'navbar-toggleable-sm':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-sm';
      break;
    case 'navbar-toggleable-xs':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-xs';
      break;
    default:
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;
  }

  if (theme_get_setting('aimx_sidebar_collapse')) {
    $variables['content_attributes']['class'][] = 'sidebar-offcanvas';
    $variables['sidebar_collapse'] = TRUE;
    $variables['#attached']['library'][] = 'aimx/sidebar_collapse';
  }

  // Declare region attributes
  $variables['navbar_top_attributes'] = new Attribute($variables['navbar_top_attributes']);
  $variables['navbar_attributes'] = new Attribute($variables['navbar_attributes']);
  $variables['content_attributes'] = new Attribute($variables['content_attributes']);
  $variables['sidebar_first_attributes'] = new Attribute($variables['sidebar_first_attributes']);
  $variables['sidebar_second_attributes'] = new Attribute($variables['sidebar_second_attributes']);

  // Declare container layout
  $variables['container_navbar'] = theme_get_setting('aimx_navbar_container');
  $variables['container'] = theme_get_setting('aimx_fluid_container') ? 'container-fluid' : 'container';
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function aimx_preprocess_page_title(&$variables)
{
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function aimx_preprocess_maintenance_page(&$variables)
{
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bootstrap Barrio has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'aimx/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function aimx_preprocess_node(&$variables)
{
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function aimx_preprocess_region(&$variables)
{
  $nowrap = [
    'breadcrumb',
    'highlighted',
    'content',
    'primary_menu',
    'header',
    'sidebar_first',
    'sidebar_second',
  ];
  if (theme_get_setting('aimx_region_class_' . $variables['elements']['#region']) !== NULL) {
    $variables['attributes']['class'][] = theme_get_setting('aimx_region_class_' . $variables['elements']['#region']);
  } elseif (!in_array($variables['elements']['#region'], $nowrap)) {
    $variables['attributes']['class'][] = 'row';
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function aimx_preprocess_block(&$variables)
{
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

function aimx_preprocess_form_element(&$variables)
{
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof \Drupal\Component\Render\MarkupInterface) {
      $variables['input_title'] = NULL;
    } elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    } else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
  switch ($variables['type']) {
    case 'checkbox':
      $variables['customtype'] = theme_get_setting('aimx_checkbox');
      break;
    case 'radio':
      $variables['customtype'] = theme_get_setting('aimx_radio');
      break;
    default:
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for form-element-label.html.twig.
 */
function aimx_preprocess_form_element_label(&$variables)
{
  $element = $variables['element'];
}

/**
 * Implements hook_preprocess_HOOK() for select.html.twig.
 */
function aimx_preprocess_select(&$variables)
{
  $variables['customtype'] = theme_get_setting('aimx_select');
}

/**
 * Implements hook_preprocess_HOOK() for file-managed-file.html.twig.
 */
function aimx_preprocess_file_managed_file(&$variables)
{
  $variables['customtype'] = theme_get_setting('aimx_file');
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function aimx_preprocess_menu(&$variables)
{
  $variables['attributes']['class'][] = 'clearfix';
}

function aimx_preprocess_menu_local_task(&$variables)
{
  //$link = $variables['element']['#link'];
  //$url = $link['url'];
  //$options = $url->getOptions();
  //$url->setOptions($options + $link['localized_options']);

  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
  //$variables['item'] = Link::fromTextAndUrl($link['title'], $url);
  //$link = $variables['element']['#link'];
  //$url = $link['url'];
  //$options = $url->getOptions();
  //$url->setOptions($options + $link['localized_options']);
  //$variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */



/**
 * Implements template_preprocess_table()
 */
function aimx_preprocess_table(&$variables)
{
  $variables['table_class'] = theme_get_setting('aimx_table_style');
  $variables['hover'] = theme_get_setting('aimx_table_hover');
  $variables['thead_class'] = theme_get_setting('aimx_table_head');
}

/**
 * Implements template_preprocess_views_view_table()
 */
function aimx_preprocess_views_view_table(&$variables)
{
  $variables['table_class'] = theme_get_setting('aimx_table_style');
  $variables['hover'] = theme_get_setting('aimx_table_hover');
  $variables['thead_class'] = theme_get_setting('aimx_table_head');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for region templates.
 */
function aimx_theme_suggestions_region_alter(array &$suggestions, array $variables)
{
  $nowrap = [
    'breadcrumb',
    'highlighted',
    'content',
    'primary_menu',
    'header',
    'sidebar_first',
    'sidebar_second',
  ];
  if (theme_get_setting('aimx_region_clean_' . $variables['elements']['#region']) !== NULL) {
    $region_clean = theme_get_setting('aimx_region_clean_' . $variables['elements']['#region']);
  } else {
    $region_clean = in_array($variables['elements']['#region'], $nowrap);
  }
  if ($region_clean) {
    $suggestions[] = 'region__nowrap';
  }
}

/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 */
function aimx_form_node_form_alter(&$form, FormStateInterface $form_state)
{
  $form['#theme'] = ['node_edit_form'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function aimx_theme_suggestions_links_alter(array &$suggestions, array $variables)
{
  // ToDo get from core a variable to flag inline links
  if (in_array('inline', $variables['attributes']['class'])) {
    $suggestions[] = 'links__inline';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for status messages templates.
 */
function aimx_theme_suggestions_status_messages_alter(array &$suggestions, array $variables)
{
  if (theme_get_setting('aimx_messages_widget') == 'toasts') {
    $suggestions[] = 'status_messages__toasts';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function aimx_theme_suggestions_form_alter(array &$suggestions, array $variables)
{
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */


/**
 * Implements hook_form_alter() to add classes to the search form.

function aimx_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $outline = theme_get_setting('aimx_button_outline') ? 'btn-primary-outline' : 'btn-primary';
// If use the $outline variable, HTML crashes. Even if use the value directly
    $form[$key]['submit']['#attributes']->addClass(['btn', 'btn-primary', 'btn-sm']);
  }
}
 */
/**
 * Implements hook_preprocess_input() to add classes to inputs.
 */
function aimx_preprocess_input(&$variables)
{
  if (isset($variables['attributes']['class'])) {
    if (is_object($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('is-invalid');
      }
    } elseif (is_array($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'is-invalid';
      }
    }
  }
  if ($variables['element']['#type'] == 'submit') {
    $button_size = theme_get_setting('aimx_button_size');
    if (is_object($variables['attributes']['class'])) {
      if (empty(array_intersect(['btn-primary', 'btn-secondary', 'btn-success', 'btn-warning', 'btn-danger', 'btn-link'], $variables['attributes']['class']->value()))) {
        if (theme_get_setting('aimx_button_outline')) {
          $variables['attributes']['class']->addClass('btn-primary-outline');
        } else {
          $variables['attributes']['class']->addClass('btn-primary');
        }
      }
      if (!in_array('btn', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('btn');
      }
      if ($button_size) {
        if (empty(array_intersect(['btn-sm', 'btn-lg'], $variables['attributes']['class']->value()))) {
          $variables['attributes']['class']->addClass($button_size);
        }
      }
    } else {
      $variables['attributes']['class'][] = 'btn';
      if (theme_get_setting('aimx_button_outline')) {
        $variables['attributes']['class'][] = 'btn-primary-outline';
      } else {
        $variables['attributes']['class'][] = 'btn-primary';
      }
      if ($button_size) {
        $variables['attributes']['class'][] = $button_size;
      }
      $variables['attributes'] = new Attribute($variables['attributes']);
    }
  }
}

/**
 * Returns width of content region.
 *
 * Calculates content width based on first and second column width parameters.
 */
function _aimx_content_width($first = 0, $second = 0)
{
  $content_offset = theme_get_setting('aimx_content_offset');
  $sidebar_first_width = ($first) ? theme_get_setting('aimx_sidebar_first_width') : 0;
  $sidebar_first_offset = ($first) ? theme_get_setting('aimx_sidebar_first_offset') : 0;
  $sidebar_second_width = ($second) ? theme_get_setting('aimx_sidebar_second_width') : 0;
  $sidebar_second_offset = ($second) ? theme_get_setting('aimx_sidebar_second_offset') : 0;
  $content_width = 12 - $content_offset - $sidebar_first_width - $sidebar_first_offset - $sidebar_second_width - $sidebar_second_offset;
  return $content_width;
}
